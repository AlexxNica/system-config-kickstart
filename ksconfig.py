#!/usr/bin/env python

#Kickstart Configurator
#Copyright Red Hat, Inc. 2001
#Written by Brent Fox (bfox@redhat.com) and Tammy Fox (tfox@redhat.com)
#Created August 10, 2000 Brent Fox
#Last Modified: January 27, 2001 Tammy Fox

from gtk import *
import GtkExtra
import auth
import network
import firewall
import string
import package

def destroy(args):
	window.destroy()
	mainquit()

def authButton_cb(args):
	global authWin
	authWin = auth.authWindow()
	
def networkButton_cb(args):
	global networkWin
	networkWin = network.networkWindow()

def firewallButton_cb(args):
	global firewallWin
	firewallWin = firewall.firewallWindow()

def packageButton_cb(args):
	global packageWin
	packageWin = package.packageWindow()

def saveFile_cb(args):
#	print networkWin.getData()
#	authData = authWin.getData()
#        print packageWin.getData()

	buf = "#Generated by Kickstart Configurator"

	buf = buf + "\n" + languageLookup(languageCombo.entry.get_text())
	buf = buf + "\n" + "keyboard " + keyboardCombo.entry.get_text()
	buf = buf + "\n" + mouseLookup(mouseCombo.entry.get_text())
	buf = buf + "\n" + "timezone --utc " + timeCombo.entry.get_text()
	buf = buf + "\n" + "rootpw " + rootEntry.get_text()

	if sourceRadio1.get_active():
		buf = buf + "\n" + "cdrom"
	elif sourceRadio2.get_active():
		buf = buf + "\n" + "nfs"
		buf = buf + " --server " + serverEntry.get_text()
		buf = buf + " --dir " + dirEntry.get_text()
	elif sourceRadio3.get_active():
		buf = buf + "\n" + "url"
		buf = buf + " --url ftp://" + ftpEntry.get_text()
		buf = buf + ftpDirEntry.get_text()		
	elif sourceRadio4.get_active():
		buf = buf + "\n" + "harddrive"
		buf = buf + " --dir " + hdDirEntry.get_text()
		buf = buf + " --partition " + hdDevEntry.get_text()
		


	try:
#		networkData = networkWin.getData()
#                print "HERE>>>>>>>>"
#		print networkWin.getData()
		buf = buf + networkWin.getData()
	except:
		pass


	buf = buf + "\n" + "install"

	buf = buf + "\n" + "auth"

	if authCheck1.get_active():
		buf = buf + " --useshadow"

		if authCheck2.get_active():
			buf = buf + " --enablemd5"


	try:
		buf = buf + authWin.getData()
	except:
		pass


#	try:
        print firewallWin.getData()
#		buf = buf + firewallWin.getData()
#	except:
#		print "problem"
#		pass

	#	buf = buf + auth.myNisClass.return_data()
	#	buf = buf + auth.myLDAPClass.return_data()
	#	buf = buf + auth.myKerberosClass.return_data()
	#	buf = buf + auth.myHesiodClass.return_data()

	if mbrRadio1.get_active():
		buf = buf + "\n" + "zerombr yes"
	elif mbrRadio2.get_active():
		buf = buf + "\n" + "zerombr no"			

	if clearRadio1.get_active():
		buf = buf
	elif clearRadio2.get_active():
		buf = buf + "\n" + "clearpart --all"
	elif clearRadio3.get_active():
		buf = buf + "\n" + "clearpart --linux"

	rows = myCount.currentVal()

	for n in range(rows):
		line = "part"
		for i in range(4):

			if i == 0:
				mount = partClist.get_text(n, i)
				if mount == '':
					line = line
				else:
					line = line + " " + mount
			elif i == 1:
				fsType = partClist.get_text(n, i)
				if fsType == 'Linux Swap':
					line = line + " swap"
				elif fsType == 'ext2':
					line = line + " "
				else:
					line = line + " " + fsType
			elif i == 2:
				size = partClist.get_text(n, i)
				line = line + " --size " + size
			elif i == 3:
				grow = partClist.get_text(n, i)
				if grow == 'Yes':
					line = line + " --grow"
				else:
					line = line

		buf = buf + "\n" + line

	if liloRadio1.get_active():
		buf = buf + "\n" + "lilo --location mbr"
	elif liloRadio2.get_active():
		buf = buf + "\n" + "lilo --location none"

	try:
		buf = buf + "\n" + packageWin.getData()
	except:
		pass

	fd = fileDialog(buf)


class fileDialog:
	def __init__(self, buf, quit_cb=None):
		self.buf = buf
#		print self.buf
		self.saveDialog = GtkFileSelection("Save File")
		self.saveDialog.set_filename("ks.cfg")
		self.saveDialog.ok_button.connect("clicked", self.saveFile)
		self.saveDialog.cancel_button.connect("clicked", self.saveDialog.destroy)
		self.saveDialog.show()
		self.filePath = ""

#	def getFilename(self):
#		return self.filePath

	def saveFile(self, args):
		self.filePath = self.saveDialog.get_filename()
#		print self.filePath

		ksFile = open(self.filePath, "w")
		ksFile.write(self.buf)
		ksFile.close()
		self.saveDialog.destroy()



def installTypeLookup(args):
	if args == 'Graphical':
		return ""
	elif args == 'Text':
		return "skipx"	

def languageLookup(args):
	if args == 'Czech':
		return "lang cs_CZ"
	if args == 'English':
		return "lang en_US"
	if args == 'French':
		return "lang fr_FR"
	if args == 'German':
		return "lang de_DE"
	if args == 'Hungarian':
		return "lang hu_HU"
	if args == 'Icelandic':
		return "lang is_IS"
	if args == 'Italian':
		return "lang it_IT"
	if args == 'Norwegian':
		return "lang no_NO"
	if args == 'Romanian':
		return "lang ro_RO"
	if args == 'Russian':
		return "lang ru_RU.K0I8-R"
	if args == 'Serbian':		
		return "lang sr_YU"
	if args == 'Slovak':		
		return "lang sk_SK"
	if args == 'Slovenian':
		return "lang sl_SI"
	if args == 'Spanish':
		return "lang es_ES"
	if args == 'Swedish':
		return "lang sv_SV"
	if args == 'Turkish':
		return "lang tr_TR"
	if args == 'Ukrainian':
		return "lang uk_UA.KOI8-U"

	
def keyboardLookup(args):
	if args == 'us':
		return "keyboard us"
		
def mouseLookup(args):
	if args:	
		return "mouse generic3ps/2"

def timezoneLookup(args):
	if args == 'US Eastern':
		return "timezone --utc US/Eastern"
	elif args == 'US Central':
		return "timezone --utc US/Central"
	elif args == 'US Mountain':
		return "timezone --utc US/Mountain"
	elif args == 'US Pacific':
		return "timezone --utc US/Pacific"

def enableNFS(args):
	serverEntry.set_sensitive(sourceRadio2.get_active())
	dirEntry.set_sensitive(sourceRadio2.get_active())

def disableNFS(args):
	serverEntry.set_state(STATE_INSENSITIVE)
	dirEntry.set_state(STATE_INSENSITIVE)

def enableFTP(args):
	ftpEntry.set_sensitive(sourceRadio3.get_active())
	ftpDirEntry.set_sensitive(sourceRadio3.get_active())

def disableFTP(args):
	ftpEntry.set_state(STATE_INSENSITIVE)

def enableHD(args):
	hdDevEntry.set_sensitive(sourceRadio4.get_active())
	hdDirEntry.set_sensitive(sourceRadio4.get_active())

def disableHD(args):
	hdDevEntry.set_state(STATE_INSENSITIVE)
	hdDirEntry.set_state(STATE_INSENSITIVE)

class counterClass:
	
	def setCounter(self, start):
		self.rowCount = start
	def increment(self):
		self.rowCount = self.rowCount + 1
	def decrement(self):
		self.rowCount = self.rowCount - 1
	def currentVal(self):
		return self.rowCount


#start of main#
window = GtkWindow()
window.connect("destroy", destroy)
window.set_title('Kickstart Configurator')
window.set_border_width(6)
window.set_default_size(480, 200)

#saveDialog = GtkFileSelection("Save File")

vbox1 = GtkVBox()
window.add(vbox1)

#number of partitions#
myCount = counterClass()
myCount.setCounter(3)

#---------------Install Type-----------#

frame1 = GtkFrame("Basic configuration")
frame1.set_label("Basic configuration")
vbox1.pack_start(frame1)

installVbox = GtkVBox()
frame1.add(installVbox)


table1 = GtkTable(7, 2, FALSE)
installVbox.pack_start(table1)

#---------------Language----------------#
languageLabel = GtkLabel("Language:")
table1.attach(languageLabel, 0, 1, 2, 3)

languageCombo = GtkCombo()
table1.attach(languageCombo, 1, 2, 2, 3)

list_items = [ "Czech", "English", "French", "German", "Hungarian", "Icelandic", 
			"Italian", "Norwegian", "Romanian", "Russian", "Serbian", "Slovak",
			"Slovenian", "Spanish", "Swedish", "Turkish", "Ukrainian" ]

languageCombo.set_popdown_strings(list_items)
languageCombo.list.select_item(1)
languageCombo.entry.set_editable(FALSE)


#---------------Keyboard------------------#
keyboardLabel = GtkLabel("Keyboard:")
table1.attach(keyboardLabel, 0, 1, 3, 4)

keyboardCombo = GtkCombo()
table1.attach(keyboardCombo, 1, 2, 3, 4)

list_items = [ "azerty", "be-latin1", "be2-latin1", "fr-latin0", "fr-pc", "fr", 
			"wangbe", "ANSI-dvorak", "dvorak-1", "dvorak-r", "dvorak", "pc-dvorak-latin1",
			"tr_f-latin5", "trf", "bg", "cf", "cz-lat2-prog", "cz-lat2", "defkeymap",
			"defkeymap_V1.0", "dk-latin1", "dk.emacs", "emacs2", "es", "fi-latin1", "fi",
			"gr-pc", "gr", "hebrew", "hu101", "is-latin", "it-ibm", "it", "it2", "jp106",
			"la-latin1", "lt", "lt.l4", "nl", "no-latin1", "no", "pc110", "pl", "pt-latin1",
			"pt-old", "ro", "ru-cp1251", "ru-ms", "ru-yawerty", "ru", "ru1", "ru2", "ru_win",
			"se-latin1", "sk-prog-qwerty", "sk-prog", "sk-qwerty", "tr_q-latin5", "tralt",
			"trf", "trq", "ua", "uk", "us", "croat", "cz-us-qwerty", "de-latin1-nodeadkeys",
			"de-latin1", "de", "fr_CH-latin1", "fr_CH", "hu", "sg-latin1-lk450",
			"sg-latin1", "sg", "sk-prog-qwertz", "sk-qwertz", "slovene" ]

keyboardCombo.set_popdown_strings(list_items)
keyboardCombo.list.select_item(63)
keyboardCombo.entry.set_editable(FALSE)


#-------------------Mouse----------------#
mouseLabel = GtkLabel("Mouse:")
table1.attach(mouseLabel, 0, 1, 4, 5)

mouseCombo = GtkCombo()
table1.attach(mouseCombo, 1, 2, 4, 5)

list_items = [ "Generic - 2 Button Mouse (serial)", "Generic - 2 Button Mouse (PS/2)",
			"Logitech - MouseMan/FirstMouse (serial)", "Logitech - MouseMan/FirstMouse (PS/2)" ]			

mouseCombo.set_popdown_strings(list_items)
mouseCombo.list.select_item(1)
mouseCombo.entry.set_editable(FALSE)

#-------------------Time Zone----------------#
timeLabel = GtkLabel("Time Zone:")
table1.attach(timeLabel, 0, 1, 5, 6)

timeCombo = GtkCombo()
table1.attach(timeCombo, 1, 2, 5, 6)

tz = open ("/usr/share/zoneinfo/zone.tab", "r")
lines = tz.readlines()
tz.close()
list_items = []

clockfile = open ("/etc/sysconfig/clock", "r")
clocklines = clockfile.readlines()
clockfile.close()
for line in clocklines:
	if line[:4] == "ZONE":
		tmp = string.split(line, "=")
		zone = tmp[1]
		zone = zone[1:-2]

for line in lines:
	if line[:1] == "#":
		pass
	else:
		tokens = string.split(line)
		list_items.append(tokens[2])

list_items.sort()

#--Search timezone list for default
if zone in list_items:
	select = list_items.index(zone)

timeCombo.set_popdown_strings(list_items)
timeCombo.list.select_item(select)
timeCombo.entry.set_editable(FALSE)

#-------------------Root Password----------------#
rootLabel = GtkLabel("Root Password:")
table1.attach(rootLabel, 0, 1, 6, 7)

rootEntry = GtkEntry()
rootEntry.set_visibility(FALSE)
table1.attach(rootEntry, 1, 2, 6, 7)


#------------------LILO--------------------------#
liloHbox = GtkHBox()
installVbox.pack_start(liloHbox)


liloLabel = GtkLabel("LILO:")
liloHbox.pack_start(liloLabel)

liloRadio1 = GtkRadioButton(None, "MBR")
liloHbox.pack_start(liloRadio1)

liloRadio2 = GtkRadioButton(liloRadio1, "None")
liloHbox.pack_start(liloRadio2)

#------------------Authentication--------------------------#
authHbox = GtkHBox()
installVbox.pack_start(authHbox)


authLabel = GtkLabel("Authentication:")
authHbox.pack_start(authLabel)

authCheck1 = GtkCheckButton("Use shadow passwords")
authCheck1.set_active(TRUE)
authHbox.pack_start(authCheck1)

authCheck2 = GtkCheckButton("Use MD5")
authCheck2.set_active(TRUE)
authHbox.pack_start(authCheck2)

#authButton = GtkButton("More...")
#authButton.connect("clicked", authWindow)
#authHbox.pack_start(authButton)

#-------------------Install Source----------------#
frame2 = GtkFrame("Installation Source")
frame2.set_label("Installation Source")
vbox1.pack_start(frame2)

installVbox = GtkVBox()
frame2.add(installVbox)

installHbox = GtkHBox()
installVbox.pack_start(installHbox)


sourceLabel = GtkLabel("Installation Source:")
installHbox.pack_start(sourceLabel)

sourceRadio1 = GtkRadioButton(None, "CD-ROM")
installHbox.pack_start(sourceRadio1)
sourceRadio1.connect("toggled", disableNFS)
sourceRadio1.connect("toggled", disableFTP)
sourceRadio1.connect("toggled", disableHD)

sourceRadio2 = GtkRadioButton(sourceRadio1, "NFS")
installHbox.pack_start(sourceRadio2)
sourceRadio2.connect("toggled", enableNFS)
sourceRadio2.connect("toggled", disableFTP)
sourceRadio2.connect("toggled", disableHD)

sourceRadio3 = GtkRadioButton(sourceRadio1, "FTP")
installHbox.pack_start(sourceRadio3)
sourceRadio3.connect("toggled", enableFTP)
sourceRadio3.connect("toggled", disableNFS)
sourceRadio3.connect("toggled", disableHD)


sourceRadio4 = GtkRadioButton(sourceRadio1, "Hard drive")
installHbox.pack_start(sourceRadio4)
sourceRadio4.connect("toggled", enableHD)
sourceRadio4.connect("toggled", disableNFS)
sourceRadio4.connect("toggled", disableFTP)


#-------------------NFS Options----------------#
installTable = GtkTable(3, 2, FALSE)
installVbox.pack_start(installTable)

serverLabel = GtkLabel("NFS Server:")
installTable.attach(serverLabel, 0, 1, 0, 1)

serverEntry = GtkEntry()
installTable.attach(serverEntry, 1, 2, 0, 1)

serverEntry.set_state(STATE_INSENSITIVE)

dirLabel = GtkLabel("NFS Directory:")
installTable.attach(dirLabel, 0, 1, 1, 2)

dirEntry = GtkEntry()
installTable.attach(dirEntry, 1, 2, 1, 2)

dirEntry.set_state(STATE_INSENSITIVE)



#-------------------FTP Options----------------#
ftpLabel = GtkLabel("FTP Server:")
installTable.attach(ftpLabel, 0, 1, 2, 3)

ftpEntry = GtkEntry()
installTable.attach(ftpEntry, 1, 2, 2, 3)

ftpLabel2 = GtkLabel("FTP Directory:")
installTable.attach(ftpLabel2, 0, 1, 3, 4)

ftpDirEntry = GtkEntry()
installTable.attach(ftpDirEntry, 1, 2, 3, 4)


ftpEntry.set_state(STATE_INSENSITIVE)
ftpDirEntry.set_state(STATE_INSENSITIVE)

#-------------------Hard Drive Options----------------#
hdHbox = GtkHBox()
installVbox.pack_start(hdHbox)

hdLabel1 = GtkLabel("Hard Drive partition:")
hdHbox.pack_start(hdLabel1)

hdDevEntry = GtkEntry()
hdDevEntry.set_usize(35, 20)
hdDevEntry.set_max_length(8)
hdHbox.pack_start(hdDevEntry)

hdLabel2 = GtkLabel("Directory:")
hdHbox.pack_start(hdLabel2)

hdDirEntry = GtkEntry()
hdHbox.pack_start(hdDirEntry)


hdDevEntry.set_state(STATE_INSENSITIVE)
hdDirEntry.set_state(STATE_INSENSITIVE)

#-----------Partition Information---------------#
frame4 = GtkFrame("Partition Information")
frame4.set_label("Partition Information")
vbox1.pack_start(frame4)

partVbox = GtkVBox()
frame4.add(partVbox)


mbrHbox = GtkHBox()
partVbox.pack_start(mbrHbox)

mbrLabel = GtkLabel("Clear Master Boot Record:")
mbrHbox.pack_start(mbrLabel)

mbrRadio1 = GtkRadioButton(None, "Yes")
mbrHbox.pack_start(mbrRadio1)

mbrRadio2 = GtkRadioButton(mbrRadio1, "No")
mbrHbox.pack_start(mbrRadio2)


clearHbox = GtkHBox()
partVbox.pack_start(clearHbox)

clearLabel = GtkLabel("Remove Existing Partitions:")
clearHbox.pack_start(clearLabel)

clearRadio1 = GtkRadioButton(None, "None")
clearHbox.pack_start(clearRadio1)

clearRadio2 = GtkRadioButton(clearRadio1, "All")
clearHbox.pack_start(clearRadio2)

clearRadio3 = GtkRadioButton(clearRadio1, "Linux")
clearHbox.pack_start(clearRadio3)

#---Partition table clist---#
titles = ["Mount Point", "Type", "Size (M)", "Growable"]

partClist = GtkCList(4, titles)
partVbox.pack_start(partClist)

partClist.set_column_width(0, 150)
partClist.set_column_width(1, 150)
partClist.set_column_width(2, 50)
partClist.set_column_width(3, 20)

s = [0]

def delPartition(_button, partClist=partClist, selected=s, myCount=myCount):
	myCount.decrement()
	partClist.remove(selected[0])
	editButton.set_state(STATE_INSENSITIVE)
	delButton.set_state(STATE_INSENSITIVE)

def select_clist(_clist, r, c, event, selected=s):
	selected[0] = r
	editButton.set_sensitive(TRUE)
	delButton.set_sensitive(TRUE)

def unselect_clist(_clist, r, c, event, selected=s):
	editButton.set_state(STATE_INSENSITIVE)
	delButton.set_state(STATE_INSENSITIVE)

def addPartition(args):
	
	addWindow = GtkWindow()
#	addWindow.connect("destroy", destroyPopup)
	addWindow.connect("delete_event", deleteEvent)
	addWindow.set_title('Add Partition Entry')
	addWindow.set_border_width(6)
	addWindow.set_default_size(100, 50)

	addTable = GtkTable(5, 2, FALSE)
	addWindow.add(addTable)

	addLabel1 = GtkLabel("Mount Point:")
	addTable.attach(addLabel1, 0, 1, 0, 1)
	
	mpCombo = GtkCombo()
	addTable.attach(mpCombo, 1, 2, 0, 1)
	list_items = [ "/", "/boot", "/home", "/usr", "/opt", "/var" ]			
	mpCombo.set_popdown_strings(list_items)
	mpCombo.entry.set_editable(TRUE)

	addLabel2 = GtkLabel("Filesystem Type:")
	addTable.attach(addLabel2, 0, 1, 1, 2)

	fsCombo = GtkCombo()
	addTable.attach(fsCombo, 1, 2, 1, 2)
	list_items = [ "ext2", "Linux Swap", "FAT 16" ]			
	fsCombo.set_popdown_strings(list_items)
	fsCombo.entry.set_text("")
	fsCombo.entry.set_editable(TRUE)
	
	addLabel3 = GtkLabel("Size (M):")
	addTable.attach(addLabel3, 0, 1, 2, 3)

	sizeEntry = GtkEntry()
	addTable.attach(sizeEntry, 1, 2, 2, 3)

	addLabel4 = GtkLabel("Growable:")
	addTable.attach(addLabel4, 0, 1, 3, 4)

	growCombo = GtkCombo()
	addTable.attach(growCombo, 1, 2, 3, 4)
	list_items = [ "No", "Yes" ]			
	growCombo.set_popdown_strings(list_items)
	growCombo.list.select_item(0)
	growCombo.entry.set_editable(FALSE)
	
	def addEntry(args, addWindow=addWindow, mpCombo=mpCombo, fsCombo=fsCombo, sizeEntry=sizeEntry, growCombo=growCombo, myCount=myCount):
		a = mpCombo.entry.get_text()
		b = fsCombo.entry.get_text()
		c = sizeEntry.get_text()
		d = growCombo.entry.get_text()

		entry = [ a, b, c, d]
		partClist.append(entry)
		addWindow.destroy()
		myCount.increment()

	ok = GtkButton("OK")
	addTable.attach(ok, 0, 1, 4, 5)
	ok.connect("clicked", addEntry)

	cancelAdd = GtkButton("Cancel")
	addTable.attach(cancelAdd, 1, 2, 4, 5)
	cancelAdd.connect("clicked", addWindow.hide)

	addWindow.show_all()


def editPartition(args, partClist=partClist, selection=s):
	
	editWindow = GtkWindow()
	editWindow.connect("delete_event", deleteEvent)
	editWindow.set_title('Edit Partition Entry')
	editWindow.set_border_width(6)
	editWindow.set_default_size(100, 50)

	editTable = GtkTable(5, 2, FALSE)
	editWindow.add(editTable)

	editLabel1 = GtkLabel("Mount Point:")
	editTable.attach(editLabel1, 0, 1, 0, 1)
	
	mpCombo = GtkCombo()
	editTable.attach(mpCombo, 1, 2, 0, 1)
	list_items = [ "/", "/boot", "/home", "/usr", "/opt", "/var" ]			
	mpCombo.set_popdown_strings(list_items)
	mpCombo.entry.set_text("")
	mpCombo.entry.set_editable(TRUE)

	editLabel2 = GtkLabel("Filesystem Type:")
	editTable.attach(editLabel2, 0, 1, 1, 2)

	fsCombo = GtkCombo()
	editTable.attach(fsCombo, 1, 2, 1, 2)
	list_items = [ "ext2", "Linux Swap", "FAT 16" ]			
	fsCombo.set_popdown_strings(list_items)
	fsCombo.entry.set_text("")
	fsCombo.entry.set_editable(FALSE)
	
	editLabel3 = GtkLabel("Size (M):")
	editTable.attach(editLabel3, 0, 1, 2, 3)

	sizeEntry = GtkEntry()
	editTable.attach(sizeEntry, 1, 2, 2, 3)

	editLabel4 = GtkLabel("Growable:")
	editTable.attach(editLabel4, 0, 1, 3, 4)

	growCombo = GtkCombo()
	editTable.attach(growCombo, 1, 2, 3, 4)
	list_items = [ "No", "Yes" ]			
	growCombo.set_popdown_strings(list_items)
	growCombo.entry.set_editable(FALSE)

	for i in range(4):
		if i == 0:
			mpCombo.entry.set_text(partClist.get_text(s[0], i))
		elif i == 1:
			fsCombo.entry.set_text(partClist.get_text(s[0], i))
		elif i == 2:
			sizeEntry.set_text(partClist.get_text(s[0], i))
		elif i == 3:
			growCombo.entry.set_text(partClist.get_text(s[0], i))
			

	def editEntry(args, editWindow=editWindow, mpCombo=mpCombo, fsCombo=fsCombo, sizeEntry=sizeEntry, growCombo=growCombo, selected=s):
		a = mpCombo.entry.get_text()
		b = fsCombo.entry.get_text()
		c = sizeEntry.get_text()
		d = growCombo.entry.get_text()

		partClist.remove(selected[0])

		entry = [ a, b, c, d]
#		partClist.append(entry)
		partClist.insert(selected[0], entry)
		editWindow.destroy()
		
		editButton.set_state(STATE_INSENSITIVE)
		delButton.set_state(STATE_INSENSITIVE)



	okEdit = GtkButton("OK")
	editTable.attach(okEdit, 0, 1, 4, 5)
	okEdit.connect("clicked", editEntry)

	cancelEdit = GtkButton("Cancel")
	editTable.attach(cancelEdit, 1, 2, 4, 5)
	editWindow.show_all()

	def exitEdit(cancelEdit=cancelEdit, editWindow=editWindow):
		editWindow.hide()

	cancelEdit.connect("clicked", exitEdit)

def deleteEvent(win, event=None):
	win.destroy()
	return TRUE

bootPartition = ["/boot", "ext2", "35", "No"]
partClist.append(bootPartition)

swapPartition = ["", "Linux Swap", "128", "No"]
partClist.append(swapPartition)

rootPartition = ["/", "ext2", "1000", "Yes"]
partClist.append(rootPartition)

partHbox = GtkHBox()
partVbox.pack_start(partHbox)

addButton = GtkButton("Add")
addButton.connect("clicked", addPartition)
partHbox.pack_start(addButton)

editButton = GtkButton("Edit")
editButton.connect("clicked", editPartition)
partHbox.pack_start(editButton)
editButton.set_state(STATE_INSENSITIVE)

delButton = GtkButton("Delete")
delButton.connect("clicked", delPartition)
partHbox.pack_start(delButton)
delButton.set_state(STATE_INSENSITIVE)

partClist.connect("select_row", select_clist)
partClist.connect("unselect_row", unselect_clist)

#----------------bottom button options---------#
optionsFrame = GtkFrame("Additional Options")
optionsTable = GtkTable (3, 2)
optionsFrame.add(optionsTable)

networkButton = GtkButton("Networking")
networkButton.connect ("clicked", networkButton_cb)
optionsTable.attach (networkButton, 0, 1, 0, 1)

authButton = GtkButton("Authentication")
authButton.connect ("clicked", authButton_cb)
optionsTable.attach (authButton, 1, 2, 0, 1)

firewallButton = GtkButton ("Firewall")
firewallButton.connect ("clicked", firewallButton_cb)
optionsTable.attach (firewallButton, 0, 1, 1, 2)

packageButton = GtkButton ("Packages")
packageButton.connect ("clicked", packageButton_cb)
optionsTable.attach (packageButton, 1, 2, 1, 2)

vbox1.pack_start(optionsFrame)

#---------------------Buttons-------------------#
hbox = GtkHBox()
hbox.show()
hbox.set_border_width(5)
hbox.set_spacing(75)
vbox1.pack_start(hbox)

saveButton = GtkButton("Save File")
#saveButton.connect("clicked", saveClicked)
#saveButton.connect("clicked", fileDialog)
saveButton.connect("clicked", saveFile_cb)
hbox.pack_start(saveButton)

exitButton = GtkButton("Exit")
exitButton.connect("clicked", destroy)
hbox.pack_start(exitButton)

window.show_all()
mainloop()
